# This is the OpenWF API token registry.
#
# It is an extremely important file. Do not mess with it unless
# you know what you're doing and have permission to do so.
#
###############################################################################
#
# Before modifying this file, read the following:
#
#   The master copy of the registry, showing up-to-date allocations,
#   is maintained in the public OpenWF registry at
#
#       https://github.com/KhronosGroup/OpenWF-Registry
#
#   The following guidelines are for reference purposes when requesting
#   new token values (unless you're the Registrar and will actually be
#   editing the registry).
#
#   Token values CANNOT be chosen arbitrarily, since the value space is
#   shared by all implementations. It is imperative that the
#   procedures described in this file be followed carefully when
#   allocating extension token values.
#
# - When adding token values for a new extension, use existing extensions
#   as a guide.
#
# - When a vendor has committed to releasing a new extension and needs to
#   allocate token values for that extension, the vendor may request the
#   Registrar allocate a previously unallocated block of values for that
#   vendor's exclusive use. These ranges are separate from reserved
#   ranges in the 0x7000-0x77FF space used by the core APIs. Blocks
#   of 16 are allocated for vendor extensions.
#
#   Allocations for extension to existing bitfield types in the core
#   API must request the exact numbers of bits required.
#
#   Finally, if a vendor wants values reserved from specific
#   Khronos_future_use ranges (typically extending the legal
#   values for a parameter type), they must request specific
#   values and the working group must sign off on the requested
#   allocation.

# - If a vendor hasn't yet released an extension, just add a comment to
#   the registry containing the name of the extension and the range of
#   token values used by the extension. When the vendor releases the
#   extension, put the actual token values in the registry.
#
# - Allocate all of the token values for an extension in a single
#   contiguous block in each range.
#
# - During development of an extension, vendors may use token values in
#   the range 0x11000-0x11FFF, but should never ship a released header
#   file or implementation using these values, since any vendor may use
#   them for any purpose. When the vendor commits to releasing the
#   extension, allocate permanent token values (see below). There are
#   two reasons for this policy:
#
#   1.  It is desirable to keep token values tightly packed and to make
#       all of the token values for an extension be contiguous. This is
#       possible only if permanent values for a new extension are not
#       allocated until the extension spec is stable and the number of
#       new values needed by the extension has stopped changing.
#
#   2.  Khronos' policy is that a vendor may allocate a new block of
#       token values only if it has committed to releasing an
#       extension that will use values in that block.
#
# - To allocate a new block of permanent token values for an extension,
#   do the following:
#
#   1.  Start at the top of the registry and choose the first future_use
#       tag that is in the appropriate range and is large enough
#       to contain the new block. This will probably be one of the
#       'Any_vendor_future_use' ranges. This helps keep allocated
#       values tightly packed.
#
#   2.  Allocate a block of values at the start of this range. If the
#       extension definition is known, include the individual token
#       assignments; otherwise just mark the block as reserved to the
#       vendor. Use existing allocations as a guide.
#
#   3.  Add the size of the block you just allocated to the start of the
#       chosen future_use range.  If you have allocated the entire range,
#       eliminate its future_use entry.
#
#   4.  No reservations are valid until a branch with the requested change
#       has been proposed as a pull request on github and accepted into
#       the master branch.
#
###############################################################################

############################################################

# Bitfields - allocate new bits individually

# WFCTransparencyType future_use: starting at (1 << 3)
typedef enum {
    WFC_TRANSPARENCY_NONE                   = 0,       /* default */
    WFC_TRANSPARENCY_ELEMENT_GLOBAL_ALPHA   = (1 << 0),
    WFC_TRANSPARENCY_SOURCE                 = (1 << 1),
    WFC_TRANSPARENCY_MASK                   = (1 << 2),
    WFC_TRANSPARENCY_FORCE_32BIT            = 0x7FFFFFFF
} WFCTransparencyType;

#WFDTransparency future_use: starting at (1 << 4)
typedef enum
{ WFD_TRANSPARENCY_NONE                     = 0,
  WFD_TRANSPARENCY_SOURCE_COLOR             = (1 << 0),
  WFD_TRANSPARENCY_GLOBAL_ALPHA             = (1 << 1),
  WFD_TRANSPARENCY_SOURCE_ALPHA             = (1 << 2),
  WFD_TRANSPARENCY_MASK                     = (1 << 3),
  WFD_TRANSPARENCY_FORCE_32BIT              = 0x7FFFFFFF
} WFDTransparency;

############################################################

# OpenWF (WFC/WFD) core API tokens: 0x7000-0x77FF

# WFCErrorCode: 0, 0x7001-0x7009
# Khronos_future_use: 0x700A-0x701F
typedef enum {
    WFC_ERROR_NONE                          = 0,
    WFC_ERROR_OUT_OF_MEMORY                 = 0x7001,
    WFC_ERROR_ILLEGAL_ARGUMENT              = 0x7002,
    WFC_ERROR_UNSUPPORTED                   = 0x7003,
    WFC_ERROR_BAD_ATTRIBUTE                 = 0x7004,
    WFC_ERROR_IN_USE                        = 0x7005,
    WFC_ERROR_BUSY                          = 0x7006,
    WFC_ERROR_BAD_DEVICE                    = 0x7007,
    WFC_ERROR_BAD_HANDLE                    = 0x7008,
    WFC_ERROR_INCONSISTENCY                 = 0x7009,
    WFC_ERROR_FORCE_32BIT                   = 0x7FFFFFFF
} WFCErrorCode;

# WFCDeviceFilter: 0x7020
# Khronos_future_use: 0x7021-0x702F
typedef enum {
    WFC_DEVICE_FILTER_SCREEN_NUMBER         = 0x7020,
    WFC_DEVICE_FILTER_FORCE_32BIT           = 0x7FFFFFFF
} WFCDeviceFilter;

# Khronos_future_use: 0x7032-0x703F
typedef enum {
    /* Read-only */
    WFC_DEVICE_CLASS                        = 0x7030,
    WFC_DEVICE_ID                           = 0x7031,
    WFC_DEVICE_FORCE_32BIT                  = 0x7FFFFFFF
} WFCDeviceAttrib;

# Khronos_future_use: 0x7042-0x704F
typedef enum {
    WFC_DEVICE_CLASS_FULLY_CAPABLE          = 0x7040,
    WFC_DEVICE_CLASS_OFF_SCREEN_ONLY        = 0x7041,
    WFC_DEVICE_CLASS_FORCE_32BIT            = 0x7FFFFFFF
} WFCDeviceClass;

# Khronos_future_use: 0x7055-0x705F, 0x7063-0x706F
typedef enum {
    /* Read-only */
    WFC_CONTEXT_TYPE                        = 0x7051,
    WFC_CONTEXT_TARGET_HEIGHT               = 0x7052,
    WFC_CONTEXT_TARGET_WIDTH                = 0x7053,
    WFC_CONTEXT_LOWEST_ELEMENT              = 0x7054,

    /* Read-write */
    WFC_CONTEXT_ROTATION                    = 0x7061,
    WFC_CONTEXT_BG_COLOR                    = 0x7062,
    WFC_CONTEXT_FORCE_32BIT                 = 0x7FFFFFFF
} WFCContextAttrib;

# Khronos_future_use: 0x7073-0x707F
typedef enum {
    WFC_CONTEXT_TYPE_ON_SCREEN              = 0x7071,
    WFC_CONTEXT_TYPE_OFF_SCREEN             = 0x7072,
    WFC_CONTEXT_TYPE_FORCE_32BIT            = 0x7FFFFFFF
} WFCContextType;

# Khronos_future_use: 0x7085-0x70FF
typedef enum {
    /* Clockwise rotation */
    WFC_ROTATION_0                          = 0x7081,  /* default */
    WFC_ROTATION_90                         = 0x7082,
    WFC_ROTATION_180                        = 0x7083,
    WFC_ROTATION_270                        = 0x7084,
    WFC_ROTATION_FORCE_32BIT                = 0x7FFFFFFF
} WFCRotation;

# Khronos_future_use: 0x710A-0x714F
typedef enum {
    WFC_ELEMENT_DESTINATION_RECTANGLE       = 0x7101,
    WFC_ELEMENT_SOURCE                      = 0x7102,
    WFC_ELEMENT_SOURCE_RECTANGLE            = 0x7103,
    WFC_ELEMENT_SOURCE_FLIP                 = 0x7104,
    WFC_ELEMENT_SOURCE_ROTATION             = 0x7105,
    WFC_ELEMENT_SOURCE_SCALE_FILTER         = 0x7106,
    WFC_ELEMENT_TRANSPARENCY_TYPES          = 0x7107,
    WFC_ELEMENT_GLOBAL_ALPHA                = 0x7108,
    WFC_ELEMENT_MASK                        = 0x7109,
    WFC_ELEMENT_FORCE_32BIT                 = 0x7FFFFFFF
} WFCElementAttrib;

# Khronos_future_use: 0x7154-0x71FF
typedef enum {
    WFC_SCALE_FILTER_NONE                   = 0x7151,  /* default */
    WFC_SCALE_FILTER_FASTER                 = 0x7152,
    WFC_SCALE_FILTER_BETTER                 = 0x7153,
    WFC_SCALE_FILTER_FORCE_32BIT            = 0x7FFFFFFF
} WFCScaleFilter;

# Khronos_future_use: 0x7204-0x72FF
typedef enum {
    WFC_VENDOR                              = 0x7200,
    WFC_RENDERER                            = 0x7201,
    WFC_VERSION                             = 0x7202,
    WFC_EXTENSIONS                          = 0x7203,
    WFC_STRINGID_FORCE_32BIT                = 0x7FFFFFFF
} WFCStringID;

# Khronos_future_use: 0x7300-0x74FF
# (no assigned enum reservation)

# Khronos_future_use: 0x7504-0x750F
typedef enum
{ WFD_VENDOR                                = 0x7500,
  WFD_RENDERER                              = 0x7501,
  WFD_VERSION                               = 0x7502,
  WFD_EXTENSIONS                            = 0x7503,
  WFD_STRING_ID_FORCE_32BIT                 = 0x7FFFFFFF
} WFDStringID;

# Khronos_future_use: 0x7519-0x752F
typedef enum
{ WFD_ERROR_NONE                            = 0,
  WFD_ERROR_OUT_OF_MEMORY                   = 0x7510,
  WFD_ERROR_ILLEGAL_ARGUMENT                = 0x7511,
  WFD_ERROR_NOT_SUPPORTED                   = 0x7512,
  WFD_ERROR_BAD_ATTRIBUTE                   = 0x7513,
  WFD_ERROR_IN_USE                          = 0x7514,
  WFD_ERROR_BUSY                            = 0x7515,
  WFD_ERROR_BAD_DEVICE                      = 0x7516,
  WFD_ERROR_BAD_HANDLE                      = 0x7517,
  WFD_ERROR_INCONSISTENCY                   = 0x7518,
  WFD_ERROR_FORCE_32BIT                     = 0x7FFFFFFF
} WFDErrorCode;

# Khronos_future_use: 0x7531-0x754F
typedef enum
{ WFD_DEVICE_FILTER_PORT_ID                 = 0x7530,
  WFD_DEVICE_FILTER_FORCE_32BIT             = 0x7FFFFFFF
} WFDDeviceFilter;

# Khronos_future_use: 0x7553-0x755F
typedef enum
{ WFD_COMMIT_ENTIRE_DEVICE                  = 0x7550,
  WFD_COMMIT_ENTIRE_PORT                    = 0x7551,
  WFD_COMMIT_PIPELINE                       = 0x7552,
  WFD_COMMIT_FORCE_32BIT                    = 0x7FFFFFFF
} WFDCommitType;

# Khronos_future_use: 0x7561-0x757F
typedef enum
{ WFD_DEVICE_ID                             = 0x7560,
  WFD_DEVICE_ATTRIB_FORCE_32BIT             = 0x7FFFFFFF
} WFDDeviceAttrib;

# Khronos_future_use: 0x7587-0x75BF
typedef enum
{ WFD_EVENT_INVALID                         = 0x7580,
  WFD_EVENT_NONE                            = 0x7581,
  WFD_EVENT_DESTROYED                       = 0x7582,
  WFD_EVENT_PORT_ATTACH_DETACH              = 0x7583,
  WFD_EVENT_PORT_PROTECTION_FAILURE         = 0x7584,
  WFD_EVENT_PIPELINE_BIND_SOURCE_COMPLETE   = 0x7585,
  WFD_EVENT_PIPELINE_BIND_MASK_COMPLETE     = 0x7586,
  WFD_EVENT_FORCE_32BIT                     = 0x7FFFFFFF
} WFDEventType;

# Khronos_future_use: 0x75C9-0x75FF
typedef enum
{ /* Configuration Attributes */
  WFD_EVENT_PIPELINE_BIND_QUEUE_SIZE        = 0x75C0,

  /* Generic Event Attributes */
  WFD_EVENT_TYPE                            = 0x75C1,

  /* Port Attach Event Attributes */
  WFD_EVENT_PORT_ATTACH_PORT_ID             = 0x75C2,
  WFD_EVENT_PORT_ATTACH_STATE               = 0x75C3,

  /* Port Protection Event Attributes */
  WFD_EVENT_PORT_PROTECTION_PORT_ID         = 0x75C4,

  /* Pipeline Bind Complete Event Attributes */
  WFD_EVENT_PIPELINE_BIND_PIPELINE_ID       = 0x75C5,
  WFD_EVENT_PIPELINE_BIND_SOURCE            = 0x75C6,
  WFD_EVENT_PIPELINE_BIND_MASK              = 0x75C7,
  WFD_EVENT_PIPELINE_BIND_QUEUE_OVERFLOW    = 0x75C8,

  WFD_EVENT_ATTRIB_FORCE_32BIT              = 0x7FFFFFFF
} WFDEventAttrib;

# Khronos_future_use: 0x7606-0x761F
typedef enum
{ WFD_PORT_MODE_WIDTH                       = 0x7600,
  WFD_PORT_MODE_HEIGHT                      = 0x7601,
  WFD_PORT_MODE_REFRESH_RATE                = 0x7602,
  WFD_PORT_MODE_FLIP_MIRROR_SUPPORT         = 0x7603,
  WFD_PORT_MODE_ROTATION_SUPPORT            = 0x7604,
  WFD_PORT_MODE_INTERLACED                  = 0x7605,
  WFD_PORT_MODE_ATTRIB_FORCE_32BIT          = 0x7FFFFFFF
} WFDPortModeAttrib;

# Khronos_future_use: 0x7635-0x765F
typedef enum
{ WFD_PORT_ID                               = 0x7620,
  WFD_PORT_TYPE                             = 0x7621,
  WFD_PORT_DETACHABLE                       = 0x7622,
  WFD_PORT_ATTACHED                         = 0x7623,
  WFD_PORT_NATIVE_RESOLUTION                = 0x7624,
  WFD_PORT_PHYSICAL_SIZE                    = 0x7625,
  WFD_PORT_FILL_PORT_AREA                   = 0x7626,
  WFD_PORT_BACKGROUND_COLOR                 = 0x7627,
  WFD_PORT_FLIP                             = 0x7628,
  WFD_PORT_MIRROR                           = 0x7629,
  WFD_PORT_ROTATION                         = 0x762A,
  WFD_PORT_POWER_MODE                       = 0x762B,
  WFD_PORT_GAMMA_RANGE                      = 0x762C,
  WFD_PORT_GAMMA                            = 0x762D,
  WFD_PORT_PARTIAL_REFRESH_SUPPORT          = 0x762E,
  WFD_PORT_PARTIAL_REFRESH_MAXIMUM          = 0x762F,
  WFD_PORT_PARTIAL_REFRESH_ENABLE           = 0x7630,
  WFD_PORT_PARTIAL_REFRESH_RECTANGLE        = 0x7631,
  WFD_PORT_PIPELINE_ID_COUNT                = 0x7632,
  WFD_PORT_BINDABLE_PIPELINE_IDS            = 0x7633,
  WFD_PORT_PROTECTION_ENABLE                = 0x7634,
  WFD_PORT_ATTRIB_FORCE_32BIT               = 0x7FFFFFFF
} WFDPortConfigAttrib;

# Khronos_future_use: 0x756A-0x767F
typedef enum
{ WFD_PORT_TYPE_INTERNAL                    = 0x7660,
  WFD_PORT_TYPE_COMPOSITE                   = 0x7661,
  WFD_PORT_TYPE_SVIDEO                      = 0x7662,
  WFD_PORT_TYPE_COMPONENT_YPbPr             = 0x7663,
  WFD_PORT_TYPE_COMPONENT_RGB               = 0x7664,
  WFD_PORT_TYPE_COMPONENT_RGBHV             = 0x7665,
  WFD_PORT_TYPE_DVI                         = 0x7666,
  WFD_PORT_TYPE_HDMI                        = 0x7667,
  WFD_PORT_TYPE_DISPLAYPORT                 = 0x7668,
  WFD_PORT_TYPE_OTHER                       = 0x7669,
  WFD_PORT_TYPE_FORCE_32BIT                 = 0x7FFFFFFF
} WFDPortType;

# Khronos_future_use: 0x7684-0x768F
typedef enum
{ WFD_POWER_MODE_OFF                        = 0x7680,
  WFD_POWER_MODE_SUSPEND                    = 0x7681,
  WFD_POWER_MODE_LIMITED_USE                = 0x7682,
  WFD_POWER_MODE_ON                         = 0x7683,
  WFD_POWER_MODE_FORCE_32BIT                = 0x7FFFFFFF
} WFDPowerMode;

# Khronos_future_use: 0x7694-0x769F
typedef enum
{ WFD_PARTIAL_REFRESH_NONE                  = 0x7690,
  WFD_PARTIAL_REFRESH_VERTICAL              = 0x7691,
  WFD_PARTIAL_REFRESH_HORIZONTAL            = 0x7692,
  WFD_PARTIAL_REFRESH_BOTH                  = 0x7693,
  WFD_PARTIAL_REFRESH_FORCE_32BIT           = 0x7FFFFFFF
} WFDPartialRefresh;

# Khronos_future_use: 0x76A4-0x76CF
typedef enum
{ WFD_DISPLAY_DATA_FORMAT_NONE              = 0x76A0,
  WFD_DISPLAY_DATA_FORMAT_EDID_V1           = 0x76A1,
  WFD_DISPLAY_DATA_FORMAT_EDID_V2           = 0x76A2,
  WFD_DISPLAY_DATA_FORMAT_DISPLAYID         = 0x76A3,
  WFD_DISPLAY_DATA_FORMAT_FORCE_32BIT       = 0x7FFFFFFF
} WFDDisplayDataFormat;

# Khronos_future_use: 0x76D2-0x771F
typedef enum
{ WFD_ROTATION_SUPPORT_NONE                 = 0x76D0,
  WFD_ROTATION_SUPPORT_LIMITED              = 0x76D1,
  WFD_ROTATION_SUPPORT_FORMAT_FORCE_32BIT   = 0x7FFFFFFF
} WFDRotationSupport;

# Khronos_future_use: 0x7630-0x775F
typedef enum
{ WFD_PIPELINE_ID                           = 0x7720,
  WFD_PIPELINE_PORTID                       = 0x7721,
  WFD_PIPELINE_LAYER                        = 0x7722,
  WFD_PIPELINE_SHAREABLE                    = 0x7723,
  WFD_PIPELINE_DIRECT_REFRESH               = 0x7724,
  WFD_PIPELINE_MAX_SOURCE_SIZE              = 0x7725,
  WFD_PIPELINE_SOURCE_RECTANGLE             = 0x7726,
  WFD_PIPELINE_FLIP                         = 0x7727,
  WFD_PIPELINE_MIRROR                       = 0x7728,
  WFD_PIPELINE_ROTATION_SUPPORT             = 0x7729,
  WFD_PIPELINE_ROTATION                     = 0x772A,
  WFD_PIPELINE_SCALE_RANGE                  = 0x772B,
  WFD_PIPELINE_SCALE_FILTER                 = 0x772C,
  WFD_PIPELINE_DESTINATION_RECTANGLE        = 0x772D,
  WFD_PIPELINE_TRANSPARENCY_ENABLE          = 0x772E,
  WFD_PIPELINE_GLOBAL_ALPHA                 = 0x772F,
  WFD_PIPELINE_ATTRIB_FORCE_32BIT           = 0x7FFFFFFF
} WFDPipelineConfigAttrib;

# Khronos_future_use: 0x7763-0x778F
typedef enum
{ WFD_SCALE_FILTER_NONE                     = 0x7760,
  WFD_SCALE_FILTER_FASTER                   = 0x7761,
  WFD_SCALE_FILTER_BETTER                   = 0x7762,
  WFD_SCALE_FILTER_FORCE_32BIT              = 0x7FFFFFFF
} WFDScaleFilter;

# Khronos_future_use: 0x7792-0x77DF
typedef enum
{ WFD_TSC_FORMAT_UINT8_RGB_8_8_8_LINEAR     = 0x7790,
  WFD_TSC_FORMAT_UINT8_RGB_5_6_5_LINEAR     = 0x7791,
  WFD_TSC_FORMAT_FORCE_32BIT                = 0x7FFFFFFF
} WFDTSColorFormat;

# Khronos_future_use: 0x77E3-0x77FF
typedef enum
{ WFD_TRANSITION_INVALID                    = 0x77E0,
  WFD_TRANSITION_IMMEDIATE                  = 0x77E1,
  WFD_TRANSITION_AT_VSYNC                   = 0x77E2,
  WFD_TRANSITION_FORCE_32BIT                = 0x7FFFFFFF
} WFDTransition;

############################################################

# Vendor extension tokens: 0x7800-0x7FFF

# Reserved to NOKIA (bug 5995): 0x7800-0x780F
NOK_clone_output enum:
# Context attributes
    WFC_CONTEXT_CLONE_SOURCE_SCREEN_NOK     = 0x7800
    WFC_CONTEXT_CLONE_STRETCH_NOK           = 0x7801
# Platform specific definition (value is for example only):
    WFC_INVALID_SCREEN_NUMBER_NOK           = (-1)

NOK_overscan_compensation enum:
# Context attributes
    WFC_CONTEXT_OVERSCAN_COMPENSATION_RECTANGLE_NOK = 0x7802

NOK_screen_priority enum:
# Context attributes
    WFC_CONTEXT_PRIORITY_NOK                = 0x7803

# (no new tokens)
NOK_content_ready_notification enum:

# NOK_future_use: 0x7804-0x780F

# Any_future_use: 0x7810-0x7FFF
